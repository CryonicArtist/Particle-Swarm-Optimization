%% ISC 3222 - Lab 5: Particle Swarm Optimization (Subplot Version)
% This script implements a PSO and visualizes the static function, 2D 
% animation, and 3D animation together in a single figure window.

% Initial AI Prompt to Generate this Project: Create a complete MATLAB script that
% uses Particle Swarm Optimization (PSO) to find the maximum of the function
% f(x,y) = -x^2 + 2*cos(pi*x) - y^2 - sin(pi*y). (File was attached)

% Clear workspace, command window, and close all figures
clear;
clc;
close all;

%% Exercise 1: Create the Evaluation Function
% We define the evaluation function f(x, y) as a vectorized anonymous function
% to easily compute scores for all particles at once.
f = @(x,y) -x.^2 + 2.*cos(pi.*x) - y.^2 - sin(pi.*y);


%% Exercise 2: Prepare Data for Plotting
% To visualize the problem space, we generate the grid data for the surface.

% Generate 100 linearly spaced points for x and y axes
x_grid = linspace(-4, 4, 100);
y_grid = linspace(-4, 4, 100);

% Create a 2D grid of x and y values
[X, Y] = meshgrid(x_grid, y_grid);

% Calculate the z value (score) for each point on the grid
Z = f(X, Y);


%% Exercise 3: Implement the Particle Swarm Optimizer
% Here we set up and run the PSO algorithm.

% --- PSO Parameters ---
n = 10;             % Number of individuals (particles)
n_steps = 100;      % Number of optimization steps
bounds = [-4, 4];   % Search space bounds for x and y
cp = 2.0;           % Cognitive (personal) coefficient
cg = 2.0;           % Social (group) coefficient

% Inertia weight 'w' decreases from 0.8 to 0 over the 100 steps
w = linspace(0.8, 0, n_steps);

% --- Initialization ---
% Initialize positions randomly within the search space
pos = (bounds(2) - bounds(1)) * rand(n, 2) + bounds(1);

% Initialize velocities to zero for all particles
vel = zeros(n, 2);

% Initialize personal best positions and scores
bstPos = pos;
bstScores = f(pos(:,1), pos(:,2));

% Find the initial global best position and score
[max_score, idx] = max(bstScores);
bstScoreG = max_score;
bstPosG = pos(idx, :);


%% Setup for Combined Figure and Movie
% Create a single, wide figure to hold all three subplots.
main_fig = figure('Name', 'PSO Visualization Dashboard', 'Position', [50 50 1600 600]);

% Setup for a single movie file that captures the entire figure
vidDashboard = VideoWriter('pso_dashboard_animation.mp4', 'MPEG-4');
open(vidDashboard);

% --- Plot the static reference surface on the first subplot ---
ax1 = subplot(1, 3, 1, 'Parent', main_fig);
surf(ax1, X, Y, Z);
shading(ax1, 'interp');
colorbar(ax1);
title(ax1, 'Static Evaluation Function');
xlabel(ax1, 'Parameter x');
ylabel(ax1, 'Parameter y');
zlabel(ax1, 'Score f(x,y)');
view(ax1, -35, 30); % Set a nice fixed view

% --- Get handles for the animation subplots ---
ax2 = subplot(1, 3, 2, 'Parent', main_fig);
ax3 = subplot(1, 3, 3, 'Parent', main_fig);


% --- Main Optimization Loop ---
for t = 1:n_steps
    
    % Generate random numbers for stochastic velocity update
    rp = rand(n, 2);
    rg = rand(n, 2);
    
    % Update velocity using the PSO formula
    vel = w(t).*vel ...
        + cp.*rp.*(bstPos - pos) ...
        + cg.*rg.*(bstPosG - pos);
        
    % Update position
    pos = pos + vel;
    
    % --- Boundary Handling ---
    pos(pos < bounds(1)) = bounds(1);
    pos(pos > bounds(2)) = bounds(2);
    
    % Evaluate scores at new positions
    new_scores = f(pos(:,1), pos(:,2));
    
    % Update personal and global best positions
    update_idx = new_scores > bstScores;
    bstScores(update_idx) = new_scores(update_idx);
    bstPos(update_idx,:) = pos(update_idx,:);
    
    [max_step_score, idx] = max(bstScores);
    if max_step_score > bstScoreG
        bstScoreG = max_step_score;
        bstPosG = bstPos(idx, :);
    end
    
    % --- Update 2D Animation (Exercise 4) ---
    cla(ax2); % Clear the second subplot
    contour(ax2, X, Y, Z, 20);
    hold(ax2, 'on');
    plot(ax2, pos(:,1), pos(:,2), 'b.', 'MarkerSize', 20);
    plot(ax2, bstPosG(1), bstPosG(2), 'r*', 'MarkerSize', 15);
    hold(ax2, 'off');
    xlim(ax2, bounds);
    ylim(ax2, bounds);
    title(ax2, sprintf('2D Particle Positions (Step: %d)', t));
    xlabel(ax2, 'Parameter x');
    ylabel(ax2, 'Parameter y');
    legend(ax2, 'Contour', 'Particles', 'Global Best', 'Location', 'southwest');

    % --- Update 3D Animation (Exercises 5 & 6) ---
    cla(ax3); % Clear the third subplot
    surf(ax3, X, Y, Z, 'FaceAlpha', 0.6, 'EdgeColor', 'none');
    hold(ax3, 'on');
    z_pos = f(pos(:,1), pos(:,2));
    plot3(ax3, pos(:,1), pos(:,2), z_pos, 'k.', 'MarkerSize', 25);
    plot3(ax3, bstPosG(1), bstPosG(2), bstScoreG, 'r*', 'MarkerSize', 15, 'LineWidth', 2);
    hold(ax3, 'off');
    title(ax3, sprintf('3D Particle Positions (Step: %d)', t));
    xlabel(ax3, 'Parameter x');
    ylabel(ax3, 'Parameter y');
    zlabel(ax3, 'Score f(x,y)');
    zlim(ax3, [min(Z(:))-2, max(Z(:))+2]);
    
    % Slowly change the viewing perspective
    az = 120 * cos(t / n_steps * 2 * pi) - 30;
    el = 25;
    view(ax3, az, el);
    
    % --- Capture the entire figure as one movie frame ---
    drawnow;
    frame = getframe(main_fig);
    writeVideo(vidDashboard, frame);
end

% --- Finalization ---
close(vidDashboard);

% Display the final results in the Command Window
fprintf('\n--- Optimization Complete ---\n');
fprintf('Found maximum score: %.4f\n', bstScoreG);
fprintf('at parameters (x, y) = (%.4f, %.4f)\n', bstPosG(1), bstPosG(2));
disp('Movie "pso_dashboard_animation.mp4" has been saved.');